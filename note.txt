npm install -g yarn

emmet pulgin - autocomplete (writing title and tab)

yarn global add live-server

command to start live server
live-server public

CDN script src
react
https://unpkg.com/react@16.0.0/umd/react.development.js
react-dom (to render to dom)
https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js

Check in developer Console on browser variables React, ReactDOM. It will be defined.

babeljs.io

var template = <h1>This is JSX from app.js!></h1>

var template = React.createElement(
    "h1", 
    {id: "someid"},
    "Something New"
);

babel is a compiler, needs plugins and presets
presets - react, env(es6, es7 features)

yarn global add babel-cli@6.24.1
npm install -g babel-cli@6.24.1

yarn init
yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2

app.js in src contains code written by us, app.js in scripts contain autogenerated compiled jsx code

For compiling of jsx
babel src/app.js --out-file=public/scripts/app.js --presets=env,react

Automaticaly recompile in case of change
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

node_modules can be deleted and regenerated
command to regenerate
yarn install

root element should be a single element

var template = (
    <div>
        <h1>Indecision App</h1>
        <p>This is some info</p>
        <ol>
            <li>Item one</li>
            <li>Item two</li>
        </ol>
    </div>
);

Dynamic data
object - {app.title}
variable - {title}

undefined , boolean, null are ignored by JSX

var based variable can be reassigned as well as redefined
let based variable can be reassigned but not redefined
const based variable cannot be reassigned or redefined

var variable are function scoped. const and let are also same. 
const and let are also block scoped but var is not.

If doesn't reassign then use const, else use let

es6 arrow function are annonymous, we need to assign to variable

arguments keyword no longer available in arrow function

this keyword - no longer bound in es5 function inside function, but work in arrow function
but arrow function not to be used in object property defination. 
New synatx for method defination
onst user = {
    name: 'Andrew',
    cities: ['Philadelphia', 'New York', 'Dublin'],
    printPlacesLived(){
        this.cities.forEach((city) => {
            console.log(this.name + ' has lived in ' + city);
        })
    }
};

map helps transform getting a new array back, unlike in forEach we can only perform something

Some property like id remain same while some like class is className in JSX

JSX does not have built in data binding

Need to rerender for dynamic display

React is super efficient, it has dom algorithm to correctly render with only the minimum change. (Elements tab rerender highlight)

----Forms and inputs----
Synthetic Events
Form Events

Handling client side javascript

To prevent full page reload on form submit event
e.preventDefault();

Just reference don't call, or it will try to use return value

To get the submitted value, option here is element name
e.target.elements.option.value

-----Arrays in JSX-----
For arrays of JSX we need to add key prop

comment in Jsx {/* comment */}

-----Picking an option-----
Math.random() - generates a random number between 0 & 1, can be multiplied to increase range

-----Thinking in react-----
React components
<IndecisionApp />
	<Header />
	<Action />
	<Options />
		<Options />
	<AddOption />

-----Classes-----
Commonly start with uppercase

`` backtocks for templates

-----Subclasses-----
extend
super to call parent class contructor

-----Component-----
React.Component has to define a render method
For React component use capital class name starting
React component is like a custom html element inside jsx

-----Component Props-----
props - pass data in when we initialize an insatance of our component
this - reference to the current instance of this component and react gives us access to our props on an object i.e this.props

For map, key needs to be passed for component as well.

-----Method binding-----
method are not able to use this

As the context of the object is not passed

To fix .bind is used
.bind({ name: 'Andrew' })

To search more search mdn bind

We will use bind while override the Component constructor

-----Component state-----
component state allows our components to manage some data. Ans when that data changes, the component will automatically render to reflect those changes.

5 step
1. Setup default state object
2. Component rendered with default state values
3. Change sate based on event.
4. Component re-rendered using new state values
5. Start again at 3

this.setState(update function) - allow us to manipulate that state object and then we done manipulating, we going to see the component refresh automatically.
call to setState are asynchronous
use update function

-----Indecision state-----
pass data upstream child to parent
pass functions as prop to children

When parent pass new prop values the child will render

mdn concat for array

-----Props vs State-----
Props
An object
Can be used when rendering
Changes (from above) cause re-renders
Comes from above
Can't be changed by component itself

State
An object
Can be used when rendering
Changes cause re-renders
Defined in component itself
Can be changed by component itself

-----Stateless functional component------
Doesn't allow state but allow props
Doesn't have access to this
Also variable start with capital

Advantage
Faster than class based components

If just has a render function only without state, use Stateless functional component

-----defaultProps------
It is object where we can specify various props that we want to give a default value to.

-----React dev tools------
React developement tools

implicitly return object
this.setState(() => ({ options: [] }));

array.filter(func return true those will be in array)

-----LifeCycle methods-----
on class based component it works
componentDidMount
componentDidUpdate - component updates 
this,state, this.props, prevProps, prevState
componentWillUnmount for cleanup

Run this in console, it will remove the prev component to test componentWillUnmount
ReactDOM.render(React.createElement('p'), document.getElementById('app'));

---localstorage---
localStorage.setItem('name', 'Andrew');
localStorage.getItem('name');
localStorage.remove('name');
localStorage.clear();

persist with page loads
only work with string data, converts number to strings

For arrays and object we can use json
const json = JSON.stringify({ age: 26 });
JSON.parse(json);

base 10
parseInt(num, 10)

NaN
isNaN()

